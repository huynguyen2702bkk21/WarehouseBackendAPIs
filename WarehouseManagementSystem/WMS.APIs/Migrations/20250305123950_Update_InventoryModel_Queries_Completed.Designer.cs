// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WMS.Infrastructure;

#nullable disable

namespace WMS.APIs.Migrations
{
    [DbContext(typeof(WMSDbContext))]
    [Migration("20250305123950_Update_InventoryModel_Queries_Completed")]
    partial class Update_InventoryModel_Queries_Completed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WMS.Domain.AggregateModels.EquipmentAggregate.Equipment", b =>
                {
                    b.Property<string>("equipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("equipmentClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("equipmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("equipmentId");

                    b.HasIndex("equipmentClassId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.EquipmentAggregate.EquipmentClass", b =>
                {
                    b.Property<string>("equipmentClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("className")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("equipmentClassId");

                    b.ToTable("EquipmentClasses");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.EquipmentAggregate.EquipmentClassProperty", b =>
                {
                    b.Property<string>("propertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("equipmentClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("propertyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("propertyValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("propertyId");

                    b.HasIndex("equipmentClassId");

                    b.ToTable("EquipmentClassProperties");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.EquipmentAggregate.EquipmentProperty", b =>
                {
                    b.Property<string>("propertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("equipmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("propertyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("propertyValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("propertyId");

                    b.HasIndex("equipmentId");

                    b.ToTable("EquipmentProperties");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryIssueAggregate.InventoryIssue", b =>
                {
                    b.Property<string>("inventoryIssueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("customerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("issueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("issueStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pesonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("warehouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("inventoryIssueId");

                    b.HasIndex("customerId");

                    b.HasIndex("pesonId");

                    b.HasIndex("warehouseId");

                    b.ToTable("InventoryIssues");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryIssueAggregate.InventoryIssueEntry", b =>
                {
                    b.Property<string>("inventoryIssueEntryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("inventoryIssueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("issueLotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("materialId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("purchaseOrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("requestedQuantity")
                        .HasColumnType("float");

                    b.HasKey("inventoryIssueEntryId");

                    b.HasIndex("inventoryIssueId");

                    b.HasIndex("materialId");

                    b.ToTable("InventoryIssuess");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryIssueAggregate.IssueLot", b =>
                {
                    b.Property<string>("issueLotId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("inventoryIssueEntryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("issueLotStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("materialLotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("requestedQuantity")
                        .HasColumnType("float");

                    b.HasKey("issueLotId");

                    b.HasIndex("inventoryIssueEntryId")
                        .IsUnique();

                    b.HasIndex("materialLotId");

                    b.ToTable("IssueLots");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryIssueAggregate.IssueSublot", b =>
                {
                    b.Property<string>("issueSublotId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("issueLotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("requestedQuantity")
                        .HasColumnType("float");

                    b.Property<string>("sublotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("issueSublotId");

                    b.HasIndex("issueLotId");

                    b.HasIndex("sublotId");

                    b.ToTable("IssueSublots");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryLogAggregate.InventoryLog", b =>
                {
                    b.Property<string>("inventoryLogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("afterQuantity")
                        .HasColumnType("float");

                    b.Property<double>("changedQuantity")
                        .HasColumnType("float");

                    b.Property<string>("lotNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("previousQuantity")
                        .HasColumnType("float");

                    b.Property<DateTime>("transactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("transactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("warehouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("inventoryLogId");

                    b.HasIndex("lotNumber");

                    b.HasIndex("warehouseId");

                    b.ToTable("InventoryLogs");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryReceiptAggregate.InventoryReceipt", b =>
                {
                    b.Property<string>("inventoryReceiptId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("personId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("receiptDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("receiptStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("warehouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("inventoryReceiptId");

                    b.HasIndex("personId");

                    b.HasIndex("supplierId");

                    b.HasIndex("warehouseId");

                    b.ToTable("InventoryReceipts");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryReceiptAggregate.InventoryReceiptEntry", b =>
                {
                    b.Property<string>("inventoryReceiptEntryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("InventoryReceiptId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("lotNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("materialId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("purchaseOrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("inventoryReceiptEntryId");

                    b.HasIndex("InventoryReceiptId");

                    b.HasIndex("materialId");

                    b.ToTable("InventoryReceiptEntries");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryReceiptAggregate.ReceiptLot", b =>
                {
                    b.Property<string>("receiptLotId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("InventoryReceiptEntryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("importedQuantity")
                        .HasColumnType("float");

                    b.Property<string>("receiptLotStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("receiptLotId");

                    b.HasIndex("InventoryReceiptEntryId")
                        .IsUnique();

                    b.ToTable("ReceiptLots");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryReceiptAggregate.ReceiptSublot", b =>
                {
                    b.Property<string>("receiptSublotId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("importedQuantity")
                        .HasColumnType("float");

                    b.Property<string>("locationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("receiptLotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("subLotStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unitOfMeasure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("receiptSublotId");

                    b.HasIndex("locationId");

                    b.HasIndex("receiptLotId");

                    b.ToTable("ReceiptSublots");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.Material", b =>
                {
                    b.Property<string>("materialId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("materialClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("materialName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("materialId");

                    b.HasIndex("materialClassId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialClass", b =>
                {
                    b.Property<string>("materialClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("className")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("materialClassId");

                    b.ToTable("MaterialClasses");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialClassProperty", b =>
                {
                    b.Property<string>("propertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("materialClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("propertyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("propertyValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("unitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("propertyId");

                    b.HasIndex("materialClassId");

                    b.ToTable("MaterialClassProperties");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialLot", b =>
                {
                    b.Property<string>("lotNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("exisitingQuantity")
                        .HasColumnType("float");

                    b.Property<string>("lotStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("materialId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("lotNumber");

                    b.HasIndex("materialId");

                    b.ToTable("MaterialLots");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialLotProperty", b =>
                {
                    b.Property<string>("propertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("lotNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("propertyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("propertyValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("unitOfMeasure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("propertyId");

                    b.HasIndex("lotNumber");

                    b.ToTable("MaterialLotProperties");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialProperty", b =>
                {
                    b.Property<string>("propertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("materialId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("propertyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("propertyValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("unitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("propertyId");

                    b.HasIndex("materialId");

                    b.ToTable("MaterialProperties");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialSubLot", b =>
                {
                    b.Property<string>("subLotId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("existingQuality")
                        .HasColumnType("float");

                    b.Property<string>("locationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("lotNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("subLotStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("unitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("subLotId");

                    b.HasIndex("locationId");

                    b.HasIndex("lotNumber");

                    b.ToTable("MaterialSubLots");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialLotAdjustmentAggregate.MaterialLotAdjustment", b =>
                {
                    b.Property<string>("materialLotAdjustmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("adjustedQuantity")
                        .HasColumnType("float");

                    b.Property<DateTime>("adjustmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("lotNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("personId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("previousQuantity")
                        .HasColumnType("float");

                    b.Property<string>("reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("warehouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("materialLotAdjustmentId");

                    b.HasIndex("lotNumber");

                    b.HasIndex("personId");

                    b.HasIndex("warehouseId");

                    b.ToTable("MaterialLotAdjustments");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.PartyAggregate.Customer", b =>
                {
                    b.Property<string>("customerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contactDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("customerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.PartyAggregate.Person", b =>
                {
                    b.Property<string>("personId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("personName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("personId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.PartyAggregate.Supplier", b =>
                {
                    b.Property<string>("supplierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contactDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("supplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.StorageAggregate.Location", b =>
                {
                    b.Property<string>("locationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("warehouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("locationId");

                    b.HasIndex("warehouseId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.StorageAggregate.Warehouse", b =>
                {
                    b.Property<string>("warehouseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("warehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("warehouseId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.EquipmentAggregate.Equipment", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.EquipmentAggregate.EquipmentClass", "equipmentClass")
                        .WithMany("equipments")
                        .HasForeignKey("equipmentClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("equipmentClass");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.EquipmentAggregate.EquipmentClassProperty", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.EquipmentAggregate.EquipmentClass", "equipmentClass")
                        .WithMany("properties")
                        .HasForeignKey("equipmentClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("equipmentClass");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.EquipmentAggregate.EquipmentProperty", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.EquipmentAggregate.Equipment", "equipment")
                        .WithMany("properties")
                        .HasForeignKey("equipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("equipment");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryIssueAggregate.InventoryIssue", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.PartyAggregate.Customer", "customer")
                        .WithMany("inventoryIssues")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.PartyAggregate.Person", "issuedBy")
                        .WithMany("inventoryIssues")
                        .HasForeignKey("pesonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.StorageAggregate.Warehouse", "warehouse")
                        .WithMany("inventoryIssues")
                        .HasForeignKey("warehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("issuedBy");

                    b.Navigation("warehouse");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryIssueAggregate.InventoryIssueEntry", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.InventoryIssueAggregate.InventoryIssue", "inventoryIssue")
                        .WithMany("entries")
                        .HasForeignKey("inventoryIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.MaterialAggregate.Material", "material")
                        .WithMany("issueEntries")
                        .HasForeignKey("materialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("inventoryIssue");

                    b.Navigation("material");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryIssueAggregate.IssueLot", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.InventoryIssueAggregate.InventoryIssueEntry", "inventoryIssueEntry")
                        .WithOne("issueLot")
                        .HasForeignKey("WMS.Domain.AggregateModels.InventoryIssueAggregate.IssueLot", "inventoryIssueEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.MaterialAggregate.MaterialLot", "materialLot")
                        .WithMany("issueLots")
                        .HasForeignKey("materialLotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("inventoryIssueEntry");

                    b.Navigation("materialLot");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryIssueAggregate.IssueSublot", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.InventoryIssueAggregate.IssueLot", "issueLot")
                        .WithMany("issueSublots")
                        .HasForeignKey("issueLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.MaterialAggregate.MaterialSubLot", "materialSublot")
                        .WithMany("issueSublots")
                        .HasForeignKey("sublotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("issueLot");

                    b.Navigation("materialSublot");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryLogAggregate.InventoryLog", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.MaterialAggregate.MaterialLot", "materialLot")
                        .WithMany("inventoryLogs")
                        .HasForeignKey("lotNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.StorageAggregate.Warehouse", "warehouse")
                        .WithMany("inventoryLogs")
                        .HasForeignKey("warehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("materialLot");

                    b.Navigation("warehouse");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryReceiptAggregate.InventoryReceipt", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.PartyAggregate.Person", "receivedBy")
                        .WithMany("inventoryReceipts")
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.PartyAggregate.Supplier", "supplier")
                        .WithMany("inventoryReceipts")
                        .HasForeignKey("supplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.StorageAggregate.Warehouse", "warehouse")
                        .WithMany("inventoryReceipts")
                        .HasForeignKey("warehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("receivedBy");

                    b.Navigation("supplier");

                    b.Navigation("warehouse");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryReceiptAggregate.InventoryReceiptEntry", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.InventoryReceiptAggregate.InventoryReceipt", "inventoryReceipt")
                        .WithMany("entries")
                        .HasForeignKey("InventoryReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.MaterialAggregate.Material", "material")
                        .WithMany("receiptEntries")
                        .HasForeignKey("materialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("inventoryReceipt");

                    b.Navigation("material");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryReceiptAggregate.ReceiptLot", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.InventoryReceiptAggregate.InventoryReceiptEntry", "inventoryReceiptEntry")
                        .WithOne("receiptLot")
                        .HasForeignKey("WMS.Domain.AggregateModels.InventoryReceiptAggregate.ReceiptLot", "InventoryReceiptEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("inventoryReceiptEntry");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryReceiptAggregate.ReceiptSublot", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.StorageAggregate.Location", "location")
                        .WithMany("receiptSublots")
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.InventoryReceiptAggregate.ReceiptLot", "receiptLot")
                        .WithMany("receiptSublots")
                        .HasForeignKey("receiptLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("location");

                    b.Navigation("receiptLot");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.Material", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.MaterialAggregate.MaterialClass", "materialClass")
                        .WithMany("materials")
                        .HasForeignKey("materialClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("materialClass");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialClassProperty", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.MaterialAggregate.MaterialClass", "materialClass")
                        .WithMany("properties")
                        .HasForeignKey("materialClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("materialClass");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialLot", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.MaterialAggregate.Material", "material")
                        .WithMany("lots")
                        .HasForeignKey("materialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("material");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialLotProperty", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.MaterialAggregate.MaterialLot", "materialLot")
                        .WithMany("properties")
                        .HasForeignKey("lotNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("materialLot");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialProperty", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.MaterialAggregate.Material", "material")
                        .WithMany("properties")
                        .HasForeignKey("materialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("material");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialSubLot", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.StorageAggregate.Location", "location")
                        .WithMany("materialSubLots")
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.MaterialAggregate.MaterialLot", "materialLot")
                        .WithMany("subLots")
                        .HasForeignKey("lotNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("location");

                    b.Navigation("materialLot");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialLotAdjustmentAggregate.MaterialLotAdjustment", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.MaterialAggregate.MaterialLot", "materialLot")
                        .WithMany("materialLotAdjustments")
                        .HasForeignKey("lotNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.PartyAggregate.Person", "adjustedBy")
                        .WithMany("materialLotAdjustments")
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMS.Domain.AggregateModels.StorageAggregate.Warehouse", "warehouse")
                        .WithMany("materialLotAdjustments")
                        .HasForeignKey("warehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("adjustedBy");

                    b.Navigation("materialLot");

                    b.Navigation("warehouse");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.StorageAggregate.Location", b =>
                {
                    b.HasOne("WMS.Domain.AggregateModels.StorageAggregate.Warehouse", "warehouse")
                        .WithMany("locations")
                        .HasForeignKey("warehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("warehouse");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.EquipmentAggregate.Equipment", b =>
                {
                    b.Navigation("properties");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.EquipmentAggregate.EquipmentClass", b =>
                {
                    b.Navigation("equipments");

                    b.Navigation("properties");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryIssueAggregate.InventoryIssue", b =>
                {
                    b.Navigation("entries");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryIssueAggregate.InventoryIssueEntry", b =>
                {
                    b.Navigation("issueLot")
                        .IsRequired();
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryIssueAggregate.IssueLot", b =>
                {
                    b.Navigation("issueSublots");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryReceiptAggregate.InventoryReceipt", b =>
                {
                    b.Navigation("entries");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryReceiptAggregate.InventoryReceiptEntry", b =>
                {
                    b.Navigation("receiptLot")
                        .IsRequired();
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.InventoryReceiptAggregate.ReceiptLot", b =>
                {
                    b.Navigation("receiptSublots");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.Material", b =>
                {
                    b.Navigation("issueEntries");

                    b.Navigation("lots");

                    b.Navigation("properties");

                    b.Navigation("receiptEntries");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialClass", b =>
                {
                    b.Navigation("materials");

                    b.Navigation("properties");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialLot", b =>
                {
                    b.Navigation("inventoryLogs");

                    b.Navigation("issueLots");

                    b.Navigation("materialLotAdjustments");

                    b.Navigation("properties");

                    b.Navigation("subLots");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.MaterialAggregate.MaterialSubLot", b =>
                {
                    b.Navigation("issueSublots");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.PartyAggregate.Customer", b =>
                {
                    b.Navigation("inventoryIssues");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.PartyAggregate.Person", b =>
                {
                    b.Navigation("inventoryIssues");

                    b.Navigation("inventoryReceipts");

                    b.Navigation("materialLotAdjustments");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.PartyAggregate.Supplier", b =>
                {
                    b.Navigation("inventoryReceipts");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.StorageAggregate.Location", b =>
                {
                    b.Navigation("materialSubLots");

                    b.Navigation("receiptSublots");
                });

            modelBuilder.Entity("WMS.Domain.AggregateModels.StorageAggregate.Warehouse", b =>
                {
                    b.Navigation("inventoryIssues");

                    b.Navigation("inventoryLogs");

                    b.Navigation("inventoryReceipts");

                    b.Navigation("locations");

                    b.Navigation("materialLotAdjustments");
                });
#pragma warning restore 612, 618
        }
    }
}
